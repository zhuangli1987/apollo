syntax = "proto2";

package adu.common.sensor;

import "header.proto";

enum RadarType {
    DELPHI_ESR_92121 = 0;
    CONTINENTAL_ARS_40821 = 1;
}

message DelphiRadarObs{
//              x axis ^                          
//                     |                  
//       \             |                /
//         \ theta(-)  | theta(+)    /   
//            \        |          /   range
//              \      |       /
//                \    |    /
//       y axis      \ | / 
//      <---------------
//        ooooooooooooo   //radar front surface
 
    optional adu.common.header.Header header = 1;
    optional int32 obstacle_id = 2;// Obstacle Id
    required double range = 3;// range to the radar; unit = m
    // azimuth angle to the radar perpendicular bisectors; (+) = clockwise; unit = degree
    required double theta = 4;
    // radial velocity relative to the radar; (+) = away from the radar; unit = m/s
    required double radial_velocity = 5;    
    // obstacle Radar Cross-Section; unit = dBsm
    optional double rcs = 6;
    // tangential velocity relative to the radar; (+) clockwise; unit = m/s
    optional double tangential_velocity = 7;
    // radial acceleration relative to the radar; (+) = away from the radar; unit = m/s
    optional double radial_acceleration = 8;    
    optional double width = 9;// obstacle width; unit = m    
    optional bool track_group_changed = 10; // 0 = no change, 1 = change
    // 0 = No MR / LR update, 1 = MR only, 2 = LR only, 3 = Both update
    optional int32 track_med_range_mode = 11;
    // 0 = no, 1 = new, 2 = new updated, 3 = updated, 4 = coated
    // 5 = merged, 6 = invalid coated, 7 = new coated
    optional int32 track_status = 12;    
    optional bool track_bridge_object = 13; // 0 = not bridge, 1 = bridge    
    optional bool track_moving = 14; // 0 = stationary, 1= moving    
    optional bool track_movable_fast = 15; // 0 = not movable, 1 = movable    
    optional bool track_movable_slow = 16; // 0 = not movable, 1 = movable
}

message ContiRadarObs {
//                x axis  ^      
//                        | longitude_dist
//                        |
//                        |
//                        |
//          lateral_dist  |
//          y axis        | 
//        <----------------
//        ooooooooooooo   //radar front surface

    optional adu.common.header.Header header = 1;
    optional bool clusterortrack = 2; // 0 = track, 1 = cluster
    optional int32 obstacle_id = 3; // obstacle Id
    // longitude distance to the radar; (+) = forward; unit = m
    required double longitude_dist = 4; 
    // lateral distance to the radar; (+) = left; unit = m
    required double lateral_dist = 5; 
    // longitude velocity to the radar; (+) = farword; unit = m/s
    required double longitude_vel = 6; 
    // lateral velocity to the radar; (+) = left; unit = m/s
    required double lateral_vel = 7; 
    // obstacle Radar Cross-Section; unit = dBsm
    optional double rcs = 8; 
    // 0 = moving, 1 = stationary, 2 = oncoming, 3 = stationary candidate
    // 4 = unkonwn, 5 = crossing stationary, 6 = crossing moving, 7 = stopped
    optional int32 dynprop = 9;
    // longitude distance standard deviation to the radar; (+) = forward; unit = m
    optional double longitude_dist_rms = 10; 
    // lateral distance standard deviationto the radar; (+) = left; unit = m 
    optional double lateral_dist_rms = 11;
    // longitude velocity standard deviation to the radar; (+) = farword; unit = m/s
    optional double longitude_vel_rms = 12;
    //lateral velocity standard deviation to the radar; (+) = left; unit = m/s 
    optional double lateral_vel_rms = 13;
    // obstacle probablity of existence
    optional double probexist = 14;

    //The following is only valid for the track object message
    // 0 = deleted, 1 = new, 2 = measured, 3 = predicted, 4 = deleted for, 5 = new from merge
    optional int32 meas_state = 15;
    // longitude acceleration to the radar; (+) = farword; unit = m/s2
    optional double longitude_accel = 16;
    // lateral acceleration to the radar; (+) = left; unit = m/s2 
    optional double lateral_accel = 17;
    // oritation angle to the radar; (+) = conterclockwise; unit = degree
    optional double oritation_angle = 18;
    // longitude acceleration standard deviation to the radar; (+) = farword; unit = m/s2 
    optional double longitude_accel_rms = 19;
    // lateral acclearation standard deviation to the radar; (+) = left; unit = m/s2 
    optional double lateral_accel_rms = 20;
    // oritation angle standard deviation to the radar; (+) = conterclockwise; unit = degree 
    optional double oritation_angle_rms = 21;    
    optional double length = 22; // obstacle length; unit = m     
    optional double width = 23;//obstacle width; unit = m 
    // 0: point; 1: car; 2: truck; 3: pedestrian; 4: motocycle; 5: bicycle; 6: wide; 7: unknown
    optional int32 obstacle_class = 24;
}

message RadarObsArray {
    optional adu.common.header.Header header = 1;     
    optional RadarType type = 2 [default = DELPHI_ESR_92121];
    repeated DelphiRadarObs delphiobs = 3; //delphi radar obstacle array
    repeated ContiRadarObs contiobs = 4;  //conti radar obstacle array
    optional double measurement_time = 5; //In seconds
}
